<div class="container-fluid">
	<div class="row">
		<div class="col-lg-2 cursorStyle">
			<div class="card border-primary">
				<div class="card-header">
					<i class="bi bi-people text-primary"></i> Employees
					<span class="badge bg-dark fs-6"> @Employees.Count</span>
				</div>
			</div>
		</div>
		<div class="col-lg-2 cursorStyle">
			<div class="card border-success " @onclick="VacationClicked">
				<div class="card-header">
					<i class="bi bi-backpack3 text-success"></i> Vacation
					<span class="badge bg-dark fs-6"> @Vacations.Count</span>
				</div>
			</div>
		</div>
		<div class="col-lg-2 cursorStyle">
			<div class="card border-danger" @onclick="OvertimeClicked">
				<div class="card-header">
					<i class="bi bi-stopwatch text-danger"></i> Overtime
					<span class="badge bg-dark fs-6"> @Overtimes.Count</span>
				</div>
			</div>
		</div>
		<div class="col-lg-2 cursorStyle">
			<div class="card border-warning" @onclick="HealthClicked">
				<div class="card-header">
					<i class="bi bi-hospital text-warning"></i> Health
					<span class="badge bg-dark fs-6"> @Health.Count</span>
				</div>
			</div>
		</div>
		<div class="col-lg-2 cursorStyle">
			<div class="card border-info" @onclick="SanctionClicked">
				<div class="card-header">
					<i class="bi bi-octagon text-info"></i> Sanctions
					<span class="badge bg-dark fs-6"> @Sanctions.Count</span>
				</div>
			</div>
		</div>
		<div class="col-lg-2 cursorStyle">
			<div class="card border-dark">
				<div class="card-header">
					<i class="bi bi-slack text-dark"></i> Department
					<span class="badge bg-dark fs-6"> @Departments.Count</span>
				</div>
			</div>
		</div>
	</div>
</div>

<style>
	.cursorStyle {
	cursor: pointer;
	}
</style>


@code {
	public List<Employee> Employees { get; set; } = new();
	public List<Vacation> Vacations { get; set; } = new();
	public List<Overtime> Overtimes { get; set; } = new();
	public List<Doctor> Health { get; set; } = new();
	public List<Sanction> Sanctions { get; set; } = new();
	public List<Department> Departments { get; set; } = new();

	protected async override Task OnInitializedAsync()
	{
		allState.Action += StateHasChanged;
		await LoadDefaults();
	}
	async Task LoadDefaults()
	{
		Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);
		Departments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
		Health = await doctorService.GetAll(Constants.DoctorBaseUrl);
		Overtimes = await overtimeService.GetAll(Constants.OvertimeBaseUrl);
		Sanctions = await sanctionService.GetAll(Constants.SanctionBaseUrl);
		Vacations = await vacationService.GetAll(Constants.VacationBaseUrl);
	}
	void HealthClicked() => allState.HealthClicked();
	void OvertimeClicked() => allState.OvertimeClicked();
	void VacationClicked() => allState.VacationClicked();
	void SanctionClicked() => allState.SanctionClicked();

	public void dispose()
	{
		allState.Action -= StateHasChanged;
	}
}