@implements IDisposable
@if (allState.ShowEmployee)
{
    if (ShowAddOrUpdateEmployee)
    {
        <div class="container">
            <div class="row mt-4">
                <div class="col-lg-1 text-start">
                    <button class="btn btn-outline-danger rounded-circle" @onclick="CloseForm">
                        <i class="bi bi-x-lg"></i>
                    </button>
                </div>
                <div class="col-lg-10 text-center">
                    <h2 class="fw-bold text-primary">@Tilte Employee</h2>
                </div>
                <div class="col-lg-1"></div>
            </div>

            <!-- Progress steps -->
            <div class="row">
                <div class="col-lg-12 mt-4 mb-4 d-flex justify-content-center">
                    <div class="d-flex align-items-center">
                        <div class="@FloatingNumber1 d-flex align-items-center justify-content-center">1</div>
                        <div class="@Floatingdiv1 format-border mx-2"></div>
                        <div class="@FloatingNumber2 d-flex align-items-center justify-content-center">2</div>
                    </div>
                </div>
            </div>

            <div class="col-lg-12">
                <div class="container-fluid">
                    <!-- First Layer - Personal Information -->
                    @if (FirstLayer)
                    {
                        <EditForm Model="EmployeeGroup1" OnValidSubmit="Form1">
                            <DataAnnotationsValidator />
                            <div class="row justify-content-center">
                                <div class="col-lg-5">
                                    <div class="card shadow-sm">
                                        <div class="card-header bg-light">
                                            <h5 class="card-title mb-0 fw-bold text-primary">
                                                <i class="bi bi-person-fill me-2"></i>Personal Information
                                            </h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="form-group mb-3">
                                                <label class="form-label fw-semibold">Full Name</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-person"></i></span>
                                                    <InputText @bind-Value="EmployeeGroup1.Name" class="form-control" placeholder="Enter full name" />
                                                </div>
                                                <ValidationMessage For="() => EmployeeGroup1.Name" class="text-danger small" />
                                            </div>
                                            <div class="form-group mb-3">
                                                <label class="form-label fw-semibold">Telephone</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-telephone"></i></span>
                                                    <InputText @bind-Value="EmployeeGroup1.TelephoneNumber" class="form-control" placeholder="Enter phone number" />
                                                </div>
                                                <ValidationMessage For="() => EmployeeGroup1.TelephoneNumber" class="text-danger small" />
                                            </div>
                                            <div class="form-group mb-3">
                                                <label class="form-label fw-semibold">Address</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-geo-alt"></i></span>
                                                    <InputText @bind-Value="EmployeeGroup1.Address" class="form-control" placeholder="Enter address" />
                                                </div>
                                                <ValidationMessage For="() => EmployeeGroup1.Address" class="text-danger small" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-5">
                                    <div class="card shadow-sm">
                                        <div class="card-header bg-light">
                                            <h5 class="card-title mb-0 fw-bold text-primary">
                                                <i class="bi bi-file-earmark-text me-2"></i>Other Information
                                            </h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="form-group mb-3">
                                                <label class="form-label fw-semibold">Civil ID</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-card-text"></i></span>
                                                    <InputText @bind-Value="EmployeeGroup1.CivilId" class="form-control" placeholder="Enter civil ID" />
                                                </div>
                                                <ValidationMessage For="() => EmployeeGroup1.CivilId" class="text-danger small" />
                                            </div>
                                            <div class="form-group mb-3">
                                                <label class="form-label fw-semibold">File Number</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-folder"></i></span>
                                                    <InputText @bind-Value="EmployeeGroup1.FileNumber" class="form-control" placeholder="Enter file number" />
                                                </div>
                                                <ValidationMessage For="() => EmployeeGroup1.FileNumber" class="text-danger small" />
                                            </div>
                                            <div class="form-group mb-3">
                                                <label class="form-label fw-semibold @(ImageUpLoadMessage == ""?"":"text-danger")">
                                                    @(ImageUpLoadMessage == "" ? "Upload Photo" : ImageUpLoadMessage)
                                                </label>
                                                <div class="row">
                                                    <div class="col-md-8">
                                                        <InputFile class="form-control" OnChange="UpLoadImage">
                                                            <i class="bi bi-upload me-2"></i>Choose PNG file
                                                        </InputFile>
                                                    </div>
                                                    <div class="col-md-4 text-center">
                                                        @if (!string.IsNullOrEmpty(EmployeeGroup1.Photo))
                                                        {
                                                            <img src="@EmployeeGroup1.Photo" class="img-thumbnail rounded-circle" style="width:80px; height:80px; object-fit:cover;" />
                                                        }
                                                        else
                                                        {
                                                            <div class="border rounded-circle d-flex align-items-center justify-content-center bg-light" style="width:80px; height:80px;">
                                                                <i class="bi bi-person text-secondary" style="font-size: 2rem;"></i>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                                <ValidationMessage For="() => EmployeeGroup1.Photo" class="text-danger small" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-4 mb-4">
                                <div class="col-12 text-center">
                                    <button class="btn btn-primary px-4 py-2" type="submit">
                                        Next Step <i class="bi bi-arrow-right ms-2"></i>
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    }

                    <!-- Second Layer - Job and Location Information -->
                    @if (SecondLayer)
                    {
                        <EditForm Model="EmployeeGroup2" OnValidSubmit="Form2">
                            <DataAnnotationsValidator />
                            <div class="row justify-content-center">
                                <div class="col-lg-5">
                                    <div class="card shadow-sm">
                                        <div class="card-header bg-light">
                                            <h5 class="card-title mb-0 fw-bold text-primary">
                                                <i class="bi bi-briefcase-fill me-2"></i>Job Information
                                            </h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="form-group mb-3">
                                                <label class="form-label fw-semibold">Job Name</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-briefcase"></i></span>
                                                    <InputText @bind-Value="EmployeeGroup2.JobName" class="form-control" placeholder="Enter job title" />
                                                </div>
                                                <ValidationMessage For="() => EmployeeGroup2.JobName" class="text-danger small" />
                                            </div>
                                            <div class="form-group mb-3">
                                                @{
                                                    string generalDepartment = GeneralDepartment.Equals("") ? "Select General Department" : GeneralDepartment;
                                                }
                                                <label class="form-label fw-semibold">General Department</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-building"></i></span>
                                                    <SfDropDownList TValue="string" TItem="GeneralDepartment" CssClass="form-control" Placeholder="@generalDepartment" DataSource="GeneralDepartments">
                                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="string" TItem="GeneralDepartment" ValueChange="OnGeneralDepartmentValueChange"></DropDownListEvents>
                                                    </SfDropDownList>
                                                </div>
                                            </div>
                                            <div class="form-group mb-3">
                                                @{
                                                    string department = Department.Equals("") ? "Select Department" : Department;
                                                }
                                                <label class="form-label fw-semibold">Department</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-diagram-3"></i></span>
                                                    <SfDropDownList TValue="string" TItem="Department" CssClass="form-control" Placeholder="@department" DataSource="Departments">
                                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="string" TItem="Department" ValueChange="OnDepartmentValueChange"></DropDownListEvents>
                                                    </SfDropDownList>
                                                </div>
                                            </div>
                                            <div class="form-group mb-3">
                                                @{
                                                    string branch = Branch.Equals("") ? "Select Branch" : Branch;
                                                }
                                                <label class="form-label fw-semibold">Branch</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-shop"></i></span>
                                                    <SfDropDownList TValue="string" TItem="Branch" CssClass="form-control" Placeholder="@branch" DataSource="Branches">
                                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="string" TItem="Branch" ValueChange="OnBranchValueChange"></DropDownListEvents>
                                                    </SfDropDownList>
                                                </div>
                                                <ValidationMessage For="() => EmployeeGroup2.BranchId" class="text-danger small" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-5">
                                    <div class="card shadow-sm">
                                        <div class="card-header bg-light">
                                            <h5 class="card-title mb-0 fw-bold text-primary">
                                                <i class="bi bi-geo-alt-fill me-2"></i>Location Information
                                            </h5>
                                        </div>
                                        <div class="card-body">
                                            <div class="form-group mb-3">
                                                @{
                                                    string country = Country.Equals("") ? "Select Country" : Country;
                                                }
                                                <label class="form-label fw-semibold">Country</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-globe"></i></span>
                                                    <SfDropDownList TValue="string" TItem="Country" CssClass="form-control" Placeholder="@country" DataSource="Countries">
                                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="string" TItem="Country" ValueChange="OnCountryValueChange"></DropDownListEvents>
                                                    </SfDropDownList>
                                                </div>
                                            </div>
                                            <div class="form-group mb-3">
                                                @{
                                                    string city = City.Equals("") ? "Select City" : City;
                                                }
                                                <label class="form-label fw-semibold">City</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-building"></i></span>
                                                    <SfDropDownList TValue="string" TItem="City" CssClass="form-control" Placeholder="@city" DataSource="Cities">
                                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="string" TItem="City" ValueChange="OnCityValueChange"></DropDownListEvents>
                                                    </SfDropDownList>
                                                </div>
                                            </div>
                                            <div class="form-group mb-3">
                                                @{
                                                    string town = Town.Equals("") ? "Select Town" : Town;
                                                }
                                                <label class="form-label fw-semibold">Town</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-pin-map"></i></span>
                                                    <SfDropDownList TValue="string" TItem="Town" CssClass="form-control" Placeholder="@town" DataSource="Towns">
                                                        <DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
                                                        <DropDownListEvents TValue="string" TItem="Town" ValueChange="OnTownValueChange"></DropDownListEvents>
                                                    </SfDropDownList>
                                                </div>
                                                <ValidationMessage For="() => EmployeeGroup2.TownId" class="text-danger small" />
                                            </div>
                                            <div class="form-group mb-3">
                                                <label class="form-label fw-semibold">Other Information</label>
                                                <div class="input-group">
                                                    <span class="input-group-text"><i class="bi bi-info-circle"></i></span>
                                                    <textarea @bind="EmployeeGroup2.Other" placeholder="Optional additional information" class="form-control" rows="3"></textarea>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row mt-4 mb-4">
                                <div class="col-12 d-flex justify-content-center gap-3">
                                    <button class="btn btn-outline-secondary px-4 py-2" type="button" @onclick="PrevClicked">
                                        <i class="bi bi-arrow-left me-2"></i> Previous
                                    </button>
                                    <button class="btn btn-success px-4 py-2" type="submit">
                                        <i class="bi bi-check-circle me-2"></i> Save Employee
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    }
}

<style>
    /* Progress steps styling */
    .floatingDiv {
        width: 100px;
        background: #0d6efd;
        height: 4px;
        transition: all 0.3s ease;
    }

    .floatingNumber {
        border-radius: 50%;
        color: white;
        background: #0d6efd;
        width: 30px;
        height: 30px;
        font-weight: bold;
        transition: all 0.3s ease;
    }

    .inactive-div {
        width: 100px;
        background: #ced4da;
        height: 4px;
        transition: all 0.3s ease;
    }

    .inactive-span {
        border-radius: 50%;
        color: white;
        background: #ced4da;
        width: 30px;
        height: 30px;
        font-weight: bold;
        transition: all 0.3s ease;
    }

    .format-border {
        border-radius: 20px;
    }

    /* Form styling */
    .card {
        border-radius: 10px;
        overflow: hidden;
        transition: all 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 .5rem 1rem rgba(0,0,0,.15) !important;
        }

    .card-header {
        border-bottom: 1px solid rgba(0,0,0,.125);
        padding: 1rem;
    }

    .form-control:focus, .form-select:focus {
        border-color: #86b7fe;
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
    }

    .btn {
        border-radius: 5px;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

        .btn-primary:hover {
            background-color: #0b5ed7;
            border-color: #0a58ca;
        }

    .btn-success {
        background-color: #198754;
        border-color: #198754;
    }

        .btn-success:hover {
            background-color: #157347;
            border-color: #146c43;
        }

    .input-group-text {
        background-color: #f8f9fa;
    }
</style>

@code
{
    [Parameter] public Employee Employee { get; set; } = new();
    [Parameter] public bool ShowAddOrUpdateEmployee { get; set; }
    [Parameter] public EmployeeGrouping1 EmployeeGroup1 { get; set; } = new();
    [Parameter] public EmployeeGrouping2 EmployeeGroup2 { get; set; } = new();

    [Parameter] public List<Country> Countries { get; set; } = new();
    [Parameter] public List<City> Cities { get; set; } = new();
    [Parameter] public List<Town> Towns { get; set; } = new();

    [Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();
    string FloatingNumber1 = "floatingNumber";
    string Floatingdiv1 = "floatingDiv";

    string FloatingNumber2 = "inactive-span";
    string Floatingdiv2 = "inactive-div";

    public bool FirstLayer { get; set; } = true;
    public bool SecondLayer { get; set; } = false;
    public string Tilte { get; set; } = "Add";
    public string GeneralDepartment { get; set; } = "";
    public string Department { get; set; } = "";
    public string Branch { get; set; } = "";
    public string Country { get; set; } = "";
    public string City { get; set; } = "";
    public string Town { get; set; } = "";

    protected override void OnInitialized()
    {
        allState.Action += StateHasChanged;
    }

    private void ShowLayer2()
    {
        FirstLayer = false;
        SecondLayer = true;
        FloatingNumber1 = "floatingNumber";
        Floatingdiv1 = "floatingDiv";
        FloatingNumber2 = "floatingNumber";
        Floatingdiv2 = "inactive-div";
    }

    void PrevClicked()
    {
        FirstLayer = true;
        SecondLayer = false;
        FloatingNumber1 = "floatingNumber";
        Floatingdiv1 = "floatingDiv";
        FloatingNumber2 = "inactive-span";
        Floatingdiv2 = "inactive-div";
    }

    //Form close
    [Parameter] public EventCallback NotifyParentFormCloseClicked { get; set; }
    private void CloseForm()
    {
        ShowAddOrUpdateEmployee = false;
        NotifyParentFormCloseClicked.InvokeAsync();
    }

    // File Upload
    string ImageUpLoadMessage = "";
    private async Task UpLoadImage(InputFileChangeEventArgs e)
    {
        if (e.File.Name.ToLower().Contains(".png"))
        {
            var format = "image/png";
            var resizedImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            ImageUpLoadMessage = "";
            EmployeeGroup1.Photo = imageData;
            imageData = "";
            return;
        }
        ImageUpLoadMessage = "PNG file needed";
        return;
    }

    // Forms Validations
    //Form 1
    private bool ValidateEmployeeGroup1()
    {
        if (string.IsNullOrEmpty(EmployeeGroup1.Name)
        || string.IsNullOrEmpty(EmployeeGroup1.TelephoneNumber)
        || string.IsNullOrEmpty(EmployeeGroup1.Address)
        || string.IsNullOrEmpty(EmployeeGroup1.CivilId)
        || string.IsNullOrEmpty(EmployeeGroup1.FileNumber)
        || string.IsNullOrEmpty(EmployeeGroup1.Photo))
        {
            return false;
        }
        else return true;
    }

    // Form 2
    private bool ValidateEmployeeGroup2()
    {
        if (string.IsNullOrEmpty(EmployeeGroup2.JobName)
        || EmployeeGroup2.BranchId == 0
        || EmployeeGroup2.TownId == 0)
        {
            return false;
        }
        else return true;
    }

    // Save forms
    [Parameter] public EventCallback<Employee> HandleSaveEmployeeClickedEvent { get; set; }
    private void Form1()
    {
        var isValid = ValidateEmployeeGroup1();
        if (isValid)
        {
            Employee.Name = EmployeeGroup1.Name;
            Employee.TelephoneNumber = EmployeeGroup1.TelephoneNumber;
            Employee.Address = EmployeeGroup1.Address;
            Employee.CivilId = EmployeeGroup1.CivilId;
            Employee.FileNumber = EmployeeGroup1.FileNumber;
            Employee.Photo = EmployeeGroup1.Photo;
            ShowLayer2();
        }
    }

    private async Task Form2()
    {
        var isValid = ValidateEmployeeGroup2();
        if (isValid)
        {
            Employee.JobName = EmployeeGroup2.JobName;
            Employee.Other = EmployeeGroup2.Other;
            Employee.BranchId = EmployeeGroup2.BranchId;
            Employee.TownId = EmployeeGroup2.TownId;

            await HandleSaveEmployeeClickedEvent.InvokeAsync(Employee);
        }
    }

    public void ClearContent()
    {
        EmployeeGroup1 = new();
        EmployeeGroup2 = new();
        Employee = new();
        StateHasChanged();
    }

    // Country // City // Town
    [Parameter] public EventCallback<int> HandleCountrySelectedEvent { get; set; }
    public void OnCountryValueChange(ChangeEventArgs<string, Country> args)
    {
        HandleCountrySelectedEvent.InvokeAsync(int.Parse(args.Value));
    }

    [Parameter] public EventCallback<int> HandleCitySelectedEvent { get; set; }
    public async Task OnCityValueChange(ChangeEventArgs<string, City> args)
    {
        await HandleCitySelectedEvent.InvokeAsync(int.Parse(args.Value));
    }

    public void OnTownValueChange(ChangeEventArgs<string, Town> args)
    => EmployeeGroup2.TownId = int.Parse(args.Value);

    // General Department // Department // Branch
    [Parameter] public EventCallback<int> HandleGeneralDepartmentSelectedEvent { get; set; }
    public async Task OnGeneralDepartmentValueChange(ChangeEventArgs<string, GeneralDepartment> args) =>
    await HandleGeneralDepartmentSelectedEvent.InvokeAsync(int.Parse(args.Value));

    [Parameter] public EventCallback<int> HandleDepartmentSelectedEvent { get; set; }
    public async Task OnDepartmentValueChange(ChangeEventArgs<string, Department> args) =>
    await HandleDepartmentSelectedEvent.InvokeAsync(int.Parse(args.Value));

    public void OnBranchValueChange(ChangeEventArgs<string, Branch> args) =>
    EmployeeGroup2.BranchId = int.Parse(args.Value);

    public void Dispose() => allState.Action -= StateHasChanged;
}