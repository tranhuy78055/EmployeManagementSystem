@implements IDisposable
@if (allState.ShowEmployee)
{
	if (ShowAddOrUpdateEmployee)
	{
		<div class="container">
			<div class="row mt-5">
				<div class="col-lg-1 text-center">
					<i class="bi bi-x-lg fs-3 fw-bold text-danger" style="cursor:pointer" @onclick="CloseForm"></i>
				</div>
				<div class="col-lg-6 text-center"><h2>Add Employee</h2></div>
			</div>

			<div class="row">
				<div class="col-lg-12 mt-2 mb-5 d-flex justify-content-center">
					<div class="hstack">
						@if (FirstLayer)
						{
							<div class="@FloatingNumber1 text-center">1</div>
							<div class="@Floatingdiv1 format-border"></div>
							<div class="@FloatingNumber2 text-center">2</div>
							<div class="@Floatingdiv2 format-border"></div>
						}
						@if (SecondLayer)
						{
							<div class="@FloatingNumber1 text-center">1</div>
							<div class="@Floatingdiv1 format-border"></div>
							<div class="@FloatingNumber1 text-center">2</div>
							<div class="@Floatingdiv1 format-border"></div>
						}
					</div>
				</div>
			</div>

			<div class="col-lg-12">
				<div class="container-fluid">
					@if (FirstLayer)
					{
						<EditForm Model="EmployeeGroup1" OnValidSubmit="Form1">
							<DataAnnotationsValidator />
							<div class="row">
								<div class="col-lg-2"></div>
								<div class="col-lg-4">
									<div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Personal Information</div>
									<div class="card-body">
										<div class="form-group">
											<label class="form-label">Fullname:</label>
											<InputText @bind-Value="EmployeeGroup1.Name" class="form-control" />
											<ValidationMessage For="() => EmployeeGroup1.Name" class="text-danger" />
										</div>
										<div class="form-group mt-2">
											<label class="form-label">Telephone:</label>
											<InputText @bind-Value="EmployeeGroup1.TelephoneNumber" class="form-control" />
											<ValidationMessage For="() => EmployeeGroup1.TelephoneNumber" class="text-danger" />
										</div>
										<div class="form-group mt-2">
											<label class="form-label">Address:</label>
											<InputText @bind-Value="EmployeeGroup1.Address" class="form-control" />
											<ValidationMessage For="() => EmployeeGroup1.Address" class="text-danger" />
										</div>
									</div>
								</div>
								<div class="col-lg-4 mt-2">
									<div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Other Information</div>
									<div class="card-body">
										<div class="form-group">
											<label class="form-label">Civil Id</label>
											<InputText @bind-Value="EmployeeGroup1.CivilId" class="form-control" />
											<ValidationMessage For="() => EmployeeGroup1.CivilId" class="text-danger" />
										</div>
										<div class="form-group mt-2">
											<label class="form-label">File Number</label>
											<InputText @bind-Value="EmployeeGroup1.FileNumber" class="form-control" />
											<ValidationMessage For="() => EmployeeGroup1.FileNumber" class="text-danger" />
										</div>
										<div class="form-group mt-2">
											<label class="form-label">Photo</label>
											<InputText @bind-Value="EmployeeGroup1.Photo" class="form-control" />
											<ValidationMessage For="() => EmployeeGroup1.Photo" class="text-danger" />
										</div>
										<div class="form-group mt-5">
											<button class="btn btn-primary float-end mt-4 mb-5" type="submit">
												Next
											</button>
										</div>
									</div>
								</div>
								<div class="col-lg-2"></div>
							</div>
						</EditForm>
					}

					@if (SecondLayer)
					{
						<EditForm Model="EmployeeGroup2" OnValidSubmit="Form2">
							<DataAnnotationsValidator />
							<div class="row">
								<div class="col-lg-2"></div>
								<div class="col-lg-4">
									<div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Job Information</div>
									<div class="card-body">
										<div class="form-group">
											<label class="form-label">Job Name</label>
											<InputText @bind-Value="EmployeeGroup2.JobName" class="form-control" />
											<ValidationMessage For="() => EmployeeGroup2.JobName" class="text-danger" />
										</div>
										<div class="form-group mt-3">
											@* <label class="form-label">@(GeneralDepartmentName == "" ? "Select General Department" : $"Selected General Department: {GeneralDepartmentName}")</label> *@
											<SfDropDownList TValue="string" TItem="GeneralDepartment" Placeholder="Select General Department" DataSource="GeneralDepartments">
												<DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
												<DropDownListEvents TValue="string" TItem="GeneralDepartment" ValueChange="OnGeneralDepartmentValueChange"></DropDownListEvents>
											</SfDropDownList>
										</div>
										<div class="form-group mt-3">
											@* <label class="form-label">@(DepartmentName == "" ? "Select Department" : $"Selected Department: {DepartmentName}")</label> *@
											<SfDropDownList TValue="string" TItem="Department" Placeholder="Select Department" DataSource="Departments">
												<DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
												<DropDownListEvents TValue="string" TItem="Department" ValueChange="OnDepartmentValueChange"></DropDownListEvents>
											</SfDropDownList>
										</div>
										<div class="form-group mt-3">
											@* <label class="form-label">@(Employee.Branch == null ? "Select Branch" : $"Selected Branch: {Employee.Branch.Name}")</label> *@
											<SfDropDownList TValue="string" TItem="Branch" Placeholder="Select Town" DataSource="Branches">
												<DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
												<DropDownListEvents TValue="string" TItem="Branch" ValueChange="OnBranchValueChange"></DropDownListEvents>
											</SfDropDownList>
											<ValidationMessage For="() => EmployeeGroup2.BranchId" class="text-danger" />
										</div>
										<div class="form-group mt-4 mb-5">
											<button class="btn btn-primary float-start" type="button" @onclick="PrevClicked">
												<i class="bi bi-arrow-left"></i>
												Prev
											</button>
										</div>
									</div>
								</div>

								<div class="col-lg-4">
									<div class="card-title mb-5 fw-bold" style="font-family:Tahoma">Location Information</div>
									<div class="card-body">
										<div class="form-group">
											@* <label class="form-label">@(CountryName == "" ? "Select Country" : $"Selected Country: {CountryName}")</label> *@
											<SfDropDownList TValue="string" TItem="Country" Placeholder="Select Country" DataSource="Countries">
												<DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
												<DropDownListEvents TValue="string" TItem="Country" ValueChange="OnCountryValueChange"></DropDownListEvents>
											</SfDropDownList>
										</div>
										<div class="form-group mt-3">
											@* <label class="form-label">@(CityName == "" ? "Select City" : $"Selected City: {CityName}")</label> *@
											<SfDropDownList TValue="string" TItem="City" Placeholder="Select City" DataSource="Cities">
												<DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
												<DropDownListEvents TValue="string" TItem="City" ValueChange="OnCityValueChange"></DropDownListEvents>
											</SfDropDownList>
										</div>
										<div class="form-group mt-3">
											@* <label class="form-label">@(Employee.Town == null ? "Select Town" : $"Selected Town: {Employee.Town.Name}")</label> *@
											<SfDropDownList TValue="string" TItem="Town" Placeholder="Select Town" DataSource="Towns">
												<DropDownListFieldSettings Value="Id" Text="Name"></DropDownListFieldSettings>
												<DropDownListEvents TValue="string" TItem="Town" ValueChange="OnTownValueChange"></DropDownListEvents>
											</SfDropDownList>
											<ValidationMessage For="() => EmployeeGroup2.TownId" class="text-danger" />
										</div>
										<div class="form-group mt-3">
											<label class="form-label">Other</label>
											<textarea @bind="EmployeeGroup2.Other" placeholder="Optional" class="form-control" />
										</div>
										<div class="form-group mt-4 mb-5">
											<button class="btn btn-success float-end" type="submit">
												<i class="bi bi-save"></i>
												Save
											</button>
										</div>
									</div>
								</div>
								<div class="col-lg-2"></div>
							</div>
						</EditForm>
					}
				</div>
			</div>
		</div>
	}
}
<style>
	.floatingDiv {
		width: 500px;
		background: #228ada;
		height: 10px;
	}

	.floatingNumber {
		border-radius: 50%;
		color: white;
		background: #1d1858;
		width: 20px;
		height: 20px;
	}

	.inactive-div {
		width: 500px;
		background: gray;
		height: 10px;
	}

	.inactive-span {
		border-radius: 50%;
		color: white;
		background: gray;
		width: 20px;
		height: 20px;
	}

	.format-border {
		border-radius: 20px;
	}
</style>
@code 
{
	[Parameter] public bool ShowAddOrUpdateEmployee { get; set; }
	[Parameter] public EmployeeGrouping1 EmployeeGroup1 { get; set; } = new();
	[Parameter] public EmployeeGrouping2 EmployeeGroup2 { get; set; } = new();

	[Parameter] public List<Country> Countries { get; set; } = new();
	[Parameter] public List<City> Cities { get; set; } = new();
	[Parameter] public List<Town> Towns { get; set; } = new();

	[Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
	[Parameter] public List<Department> Departments { get; set; } = new();
	[Parameter] public List<Branch> Branches { get; set; } = new();
	string FloatingNumber1 = "floatingNumber";
	string Floatingdiv1 = "floatingDiv";

	string FloatingNumber2 = "inactive-span";
	string Floatingdiv2 = "inactive-div";

	public bool FirstLayer { get; set; } = true;
	public bool SecondLayer { get; set; } = false;

	private void ShowLayer2()
	{
		FirstLayer = false;
		SecondLayer = true;
	}
	void PrevClicked()
	{
		FirstLayer = true;
		SecondLayer = false;
	}
	protected override void OnInitialized()
	{
		allState.Action += StateHasChanged;
	}
	public void Dispose() => allState.Action -= StateHasChanged;
	[Parameter] public EventCallback NotifyParentFormCloseClicked { get; set; }
	private void CloseForm()
	{
		ShowAddOrUpdateEmployee = false;
		NotifyParentFormCloseClicked.InvokeAsync();
	}
	// Country // City // Town
	[Parameter] public EventCallback<int> HandleCountrySlectedEvent { get; set; }
	public void OnCountryValueChange(ChangeEventArgs<string,Country> args)
	{
		 HandleCountrySlectedEvent.InvokeAsync(int.Parse(args.Value));
	}
	[Parameter] public EventCallback<int> HandleCitySlectedEvent { get; set; }
	public async Task OnCityValueChange(ChangeEventArgs<string, City> args)
	{
		await HandleCitySlectedEvent.InvokeAsync(int.Parse(args.Value));
	}
	[Parameter] public EventCallback<int> HandleTownSlectedEvent { get; set; }
	public async Task OnTownValueChange(ChangeEventArgs<string, Town> args)
	{
		await HandleTownSlectedEvent.InvokeAsync(int.Parse(args.Value));
	}

	// General Department // Department // Branch
	[Parameter] public EventCallback<int> HandleGeneralDepartmentSlectedEvent { get; set; }
	public async Task OnGeneralDepartmentValueChange(ChangeEventArgs<string, GeneralDepartment> args)
	{
		await HandleGeneralDepartmentSlectedEvent.InvokeAsync(int.Parse(args.Value));
	}
	[Parameter] public EventCallback<int> HandleDepartmentSlectedEvent { get; set; }
	public async Task OnDepartmentValueChange(ChangeEventArgs<string, Department> args)
	{
		await HandleDepartmentSlectedEvent.InvokeAsync(int.Parse(args.Value));
	}
	[Parameter] public EventCallback<int> HandleBranchSlectedEvent { get; set; }
	public async Task OnBranchValueChange(ChangeEventArgs<string, Branch> args)
	{
		await HandleBranchSlectedEvent.InvokeAsync(int.Parse(args.Value));
	}
	// Froms handleing /1 & 2
	void Form1()
	{

	}
	void Form2()
	{
	}

}