@implements IDisposable
@if (allState.ShowVacationType)
{
    <div class="container-fluid py-4">
        <div class="card shadow-sm border-0 rounded-3">
            <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
                <h4 class="mb-0 fw-semibold text-primary">Vacation Types</h4>
                <button class="btn btn-primary rounded-pill px-4 d-flex align-items-center gap-2" @onclick="OpenDialog">
                    <i class="bi bi-plus-circle-fill"></i> Add Type
                </button>
            </div>
            <div class="card-body p-4">
                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text bg-light border-end-0">
                                <i class="bi bi-search text-muted"></i>
                            </span>
                            <input type="text" class="form-control border-start-0 ps-0"
                                   placeholder="Search types..."
                                   @bind="searchTerm"
                                   @oninput="FilterTypes" />
                        </div>
                    </div>
                </div>

                @if (isLoading)
                {
                    <div class="d-flex justify-content-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="table-responsive custom-scrollbar" style="max-height:580px;">
                        <table class="table table-hover align-middle">
                            <thead class="table-light sticky-top">
                                <tr>
                                    <th scope="col" class="fw-semibold">#</th>
                                    <th scope="col" class="fw-semibold">ID</th>
                                    <th scope="col" class="fw-semibold">Type</th>
                                    <th scope="col" class="fw-semibold text-end">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (filteredTypes is not null && filteredTypes.Any())
                                {
                                    int count = 1;
                                    foreach (var item in filteredTypes)
                                    {
                                        <tr>
                                            <th scope="row" class="text-muted">@count</th>
                                            <td class="text-muted">@item.Id</td>
                                            <td class="fw-medium">@item.Name</td>
                                            <td class="text-end">
                                                <div class="btn-group">
                                                    <button class="btn btn-sm btn-outline-primary rounded-pill me-2"
                                                            @onclick="() => EditClicked(item)"
                                                            title="Edit">
                                                        <i class="bi bi-pencil-fill"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger rounded-pill"
                                                            @onclick="() => DeleteClicked(item)"
                                                            title="Delete">
                                                        <i class="bi bi-trash-fill"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                        count++;
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="4">
                                            <div class="alert alert-info text-center border-0 rounded-3 py-4">
                                                <i class="bi bi-info-circle-fill fs-4 d-block mb-2"></i>
                                                No types found. Add your first type to get started.
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
            <div class="card-footer bg-white py-3 d-flex justify-content-between">
                <div class="text-muted small">
                    @if (filteredTypes is not null && filteredTypes.Any())
                    {
                        <span>Showing @filteredTypes.Count of @Types.Count types</span>
                    }
                </div>
                <!-- Pagination controls can be added here -->
            </div>
        </div>
    </div>
}

<VacationTypeDialog @ref="vacationTypeDialog"
                    HandleSaveOperationEvent="HandleSaveOperationEvent"
                    VacationType="VacationType" />

<style>
    .cursorStyle {
        cursor: pointer;
    }

    .custom-scrollbar {
        scrollbar-width: thin;
        scrollbar-color: #dee2e6 #ffffff;
    }

        .custom-scrollbar::-webkit-scrollbar {
            width: 6px;
        }

        .custom-scrollbar::-webkit-scrollbar-track {
            background: #ffffff;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb {
            background-color: #dee2e6;
            border-radius: 6px;
        }

    .table-hover tbody tr:hover {
        background-color: rgba(13, 110, 253, 0.05);
    }

    .sticky-top {
        position: sticky;
        top: 0;
        z-index: 1;
        background-color: #f8f9fa;
    }
</style>

@code {
    private VacationTypeDialog? vacationTypeDialog;
    private VacationType VacationType { get; set; } = new();
    public string Title { get; set; } = "Add";
    public List<VacationType> Types { get; set; } = new();
    public List<VacationType> filteredTypes { get; set; } = new();
    private string searchTerm = string.Empty;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await GetTypes();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes()
    {
        isLoading = true;
        Types = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);
        filteredTypes = Types;
        isLoading = false;
    }

    private void OpenDialog() => vacationTypeDialog?.OpenDialog();

    private async Task HandleSaveOperationEvent(VacationType item)
    {
        bool successCheck = false;
        if (item.Id > 0)
        {
            var result = await vacationTypeService.Update(item, Constants.VacationTypeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await vacationTypeService.Insert(item, Constants.VacationTypeBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            VacationType = new();
            await GetTypes();
            vacationTypeDialog?.ChangeTitle("Add");
        }
    }

    private void EditClicked(VacationType item)
    {
        vacationTypeDialog?.ChangeTitle("Update");
        VacationType = item;
        OpenDialog();
    }

    private async Task DeleteClicked(VacationType item)
    {
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you want to delete {item.Name}?", "Confirm Delete");
        if (!confirm) return;

        var response = await vacationTypeService.DeleteById(item.Id, Constants.VacationTypeBaseUrl);
        if (await DisplayMessage(response.Flag, response.Message))
        {
            await GetTypes();
        }
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            await dialogService.AlertAsync(message, "Success Operation");
            return true;
        }
        else
        {
            await dialogService.AlertAsync(message, "Alert!");
            return false;
        }
    }

    private void FilterTypes(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        filteredTypes = Types
            .Where(t => t.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
